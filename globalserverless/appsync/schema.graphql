input CreateItemsModelInput {
	id: ID
	item: String
}

input DeleteItemsModelInput {
	id: ID!
}

type ItemsModel {
	id: ID!
	item: String
}

type ItemsModelConnection {
	items: [ItemsModel]
	nextToken: String
}

type ItemsModelPublish {
	id: ID
	item: String
}

type Mutation {
	createItemsModel(input: CreateItemsModelInput!): ItemsModel
	updateItemsModel(input: UpdateItemsModelInput!): ItemsModel
	deleteItemsModel(input: DeleteItemsModelInput!): ItemsModel
	publishItemsModel(input: PublishItemsModelInput!): ItemsModelPublish
}

input PublishItemsModelInput {
	id: ID!
	item: String!
}

type Query {
	getItemsModel(id: ID!): ItemsModel
	listItemsModel(filter: TableItemsModelFilterInput, limit: Int, nextToken: String): ItemsModelConnection
}

type Subscription {
	onCreateItemsModel(id: ID, item: String): ItemsModelPublish
		@aws_subscribe(mutations: ["publishItemsModel"])
	onUpdateItemsModel(id: ID, item: String): ItemsModel
		@aws_subscribe(mutations: ["updateItemsModel"])
	onDeleteItemsModel(id: ID, item: String): ItemsModel
		@aws_subscribe(mutations: ["deleteItemsModel"])
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableItemsModelFilterInput {
	id: TableIDFilterInput
	item: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateItemsModelInput {
	id: ID!
	item: String
}